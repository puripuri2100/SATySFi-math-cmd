@require: list
@require: math

module MathCmd : sig

val document : math list -> document

end = struct

let font-latin-roman  = (`Junicode`, 1., 0.)
let font-latin-italic = (`Junicode-it`, 1., 0.)
let font-latin-sans   = (`lmsans`, 1., 0.)
let font-cjk-mincho   = (`ipaexm`, 0.88, 0.)
let font-cjk-gothic   = (`ipaexg`, 0.88, 0.)

let get-standard-context wid =
  get-initial-context wid (command \math)
    |> set-dominant-wide-script Kana
    |> set-language Kana Japanese
    |> set-language HanIdeographic Japanese
    |> set-dominant-narrow-script Latin
    |> set-language Latin English
    |> set-font Kana font-cjk-mincho
    |> set-font HanIdeographic font-cjk-mincho
    |> set-font Latin font-latin-roman
    |> set-math-font `lmodern`
    |> set-hyphen-penalty 100
    |> set-font-size 30pt


let-rec get-max-size w h l =
  match l with
  | [] -> (w, h)
  | (w2, h2)::xs -> (
    let w =
      if w2 >' w then
        w2
      else
        w
    in
    let h =
      if h2 >' h then
        h2
      else
        h
    in
    get-max-size w h xs
  )


let document math-lst =

  let dummy-width = 300mm in
  let dummy-ctx = get-standard-context dummy-width in

  let(max-width, max-height) =
    math-lst
    |> List.map (fun m -> (
      m
      |> embed-math dummy-ctx
      |> get-natural-metrics
      |> (fun (w,h,d) -> (w, h+'d))
    ))
    |> get-max-size 0pt 0pt
  in

  let pad = 15pt in
  let width = max-width +' (pad *' 2.0) in
  let height = max-height +' (pad *' 2.0) in

  let ctx = get-standard-context width in


  let bb-main =
    math-lst
    |> List.map (fun m -> (
      let ib = inline-fil ++ embed-math ctx m ++ inline-fil in
      let bb = line-break true true ctx ib in
      let h = get-natural-length bb in
      let p = (height -' h) *' 0.2 in
      block-skip p +++ bb
    ))
    |> List.fold-lefti (fun i bb1 bb2 -> (
      if i == 0 then
        bb2
      else
        bb1 +++ clear-page +++ bb2
    )) block-nil
  in


  let page = UserDefinedPaper (width, height) in

  let pagecontf pbinfo =
    (|
      text-origin = (0pt, 0pt);
      text-height = height;
    |)
  in

  let pagepartsf pbinfo =
  (|
    header-origin  = (0pt, 0pt);
    header-content = block-nil;
    footer-origin  = (width, height);
    footer-content = block-nil;
  |)
  in
  page-break page pagecontf pagepartsf bb-main

end

let document = MathCmd.document
